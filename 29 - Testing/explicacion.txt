TESTING
    Parte Fundamental a la hora de realizar codigo.

    Ventajas
        ·Reduccion posibilidad de error
        ·Incremento en el conocimiento del codigo
        ·descubrimiento de puntos ciegos del codigo
        ·Posibilidad de refactoring
    

2 Formas ( Unitario o De Integracion )


UNITARIO
    para funcionalidades aisladas, auqellas en las que no se consideran el contexto u otros compoenntes.

        EJ testing de un determinado modulo que lea correctamnte los datos de la entidad en el sistema de Persistncia,
        · que el modulo escriba correctamnte los datos de la entidad en el sistema de persis. ETC

    Operaciones sencillad para un modulo sencillo.
------------------------------------------------------------------------------------------------------------------------------------
MOCHA

    Framework de testing que nos permitiria ejecutar entornos completos para hacer testing.

    GLOSARIO
        ASSERT: permite hacer validaciones estrictas

        Archivo.test.js: 
        indica que el archivo sera utilizado dentro de contexto de testing

        DESCRIBE:
            Funcion utilizada para definir contextos de teste.
        IT: Unidad minima de nuestro testng, en lla definimos que accion se esta realizadno y caul es el resultado esperado.

        BEFORE: funcion que opermite incizializar elementos antes de comenzar con todo el contexto de test

        BEFOREEACH:
            Funcion que nos permite inicializar eñements antes de CADA TEST
        
        AFTER: Funcion que nos permite realizar accion finalizado el contexto de cada test

        AFTEREACH:
            """ para CADA TEST



-------------------------------
INSTALACION
    npm i -D mocha

    1 - Creamos carpeta test / users.test.js

    2 - Importar
        · DAO del modulo a testear ( users )

        · mongoose

        · Assert desde "assert"

        · {describe, it} desde mocha

    3 - Creamos La conexxion a BD con mongoose

    4 - Realizamos el assert para las afirmaciones

            const assert = Assert.strict

    5 - Empezamos a crear el contexto de test con describe

        describe( "TEST DAO DE USER", function(){


//Tiempo limite para pruebas
            this.timeout(5000)


//Accion que se realiza antes de comezar a testear, LOGIC. debemos instanciar el DAO asi funciona


            before(function(){
                this.usersDao = new UsersDao()
            })


//ACA VAMOS A LIMPIAR ANTES DE CADA TEST
    beforeEach(async function(){
        // ???
        await mongoose.connection.collection("users").deleteMany({email:"jlopez@test.com"})
    })



//LIMPIAMOS BD AL FINALIZAR
    after(async()=>{
        // limpieza BD
        await mongoose.connection.collection("users").deleteMany({email:"jlopez@test.com"})

    })



6- Comenzamos a crear los testing unitarios

            it("Dao que recupera el array de usuarios de DB", async funciton(){
                let resultado = await this.usersDao.get()


//con los assert vamos poniendo lo que esperamos
                assert.equal(Array.isArray(resultado), true)

//Primero 
    · EQUAL= es igual a 
    ·1er argumento (), condicion
    · 2do argumento, resultado esperado

//Aqui esperamos que devuelva UN ARRAY  entonces analisamos si el reusltado es Array y esperamos que sea true esa condicion


//taambien podemos agregarle mas subcondiciones al test ej:

            if(Array.isArray(resultado) && resultado.length>0){
            assert.ok(resultado[0]._id)
            assert.ok(resultado[0].email)
        }

    /esto serviria para probar que efectivamente sea un array que contenga suarios
            })
        


  it("El dao permite grabar un usuario en DB, con su método save", async function(){
        let userTest={
            first_name:"Juan", last_name:"Lopez", email:"jlopez@test.com", password:"123"
        }

        let resultado=await this.usersDao.save(userTest)

        assert.ok(resultado._id)
        assert.ok(resultado.email)
        assert.equal(resultado.email, "jlopez@test.com")
        assert.equal(typeof resultado._id, "object")

    })    



        })


7 - Ejecutamos mocha desde consola

    npx mocha --exit


-----------------------------------------------------


    CHAI
        Es una libreria de assertions la cual nos permitira realizar comparaciones de test mas claras.

        Esta pensado para que las evaluaciones de test que se hagan en cada modulo sean lo mas legible posible.

1º
        npm i chai

2º import {expect, should} from 'chai'

3° inicializar    should()

4°  Todo lo mismo con mocha

    Pero al momento de hacer el it, en los resultados esperados, empezamos a usar el "EXPECT" de chai


//Mismo ejem de hoy controlar que sea un array

·expect == "esperado"
· .to.be .... === "ES"
· equal(valor)  == "igual a "

    expect(Array.isArray(resultado)).to.be.equal(true)

DESPUES TENEMOS:

.is 
    se traduce directamente a .is en Chai. Se usa para realizar comparaciones de igualdad estricta (===).

.should
     es una forma de acceder a las aserciones de Chai utilizando la sintaxis del encadenamiento de propiedades. En Chai, puedes usar .should directamente.

     (BASICAMENTE ES COMO QUE DEJA MAS LEGIBLE LAS ESTRUCTURAS 
     
     EJ 
            let miArray = [1, 2, 3];
miArray.should.be.an('array').with.lengthOf(3).that.includes(2);)

.exist
     también se mantiene igual en Chai. Se utiliza para verificar si un valor no es null ni undefined.

· .and

· .have

· .to 

· .deep

    Fijate que son todas practicamente palabras del lenguaje humano con la misma funcionalidad, es exactamnte lo que hace chai, deja los test para que practicamnte se hagan como si se escribiera en lenguaje humano.



EJ:
    Tambien podemos hacer comparaciones mas produndas con DEEP

        let a = (1,2,3)
       let b = (1,2,3)       Parece que tienen el mismo contenido pero no porque no apuntan a la misma memroia pq son var dif

       Entonces dentro de "equal" no entraria 

       Ahi entra en juego DEEP

            ...(a).to.be.equal(b) == XXXXXXX ------------- >> ...(a).to.be.deep.equal(b)




EJ DE TESTING DE HASHEO

                import { createHash, passwordValidation } from "../src/utils/index.js";
                import {expect} from "chai"
                import {describe, it} from "mocha"

                describe("Test funciones de hash", ()=>{

                    it("El método createHash, recibe un texto y devuelve el texto encriptado", async()=>{

                        let password="Coder"
                        let resultado=await createHash(password)

                        expect(resultado).not.to.be.equal(password)
                        expect(resultado.length).is.greaterThan(15)
                        expect(resultado).includes("$2b$")

                        const bcryptRegex = /^\$2[ayb]\$[0-9]{2}\$[A-Za-z0-9./]{53}$/
                        expect(bcryptRegex.test(resultado)).to.be.true

                    })

                    it("El metodo passwordValidation recibe un usuario con pass encriptada y una pass en text y las compara...", async()=>{

                        let password="123"
                        let hash=await createHash(password)
                        let usuario={
                            password:hash
                        }

                        let resultado=await passwordValidation(usuario, password)
                        let resultadoMal=await passwordValidation(usuario, "1234567")

                        expect(resultado).to.be.true
                        expect(resultado).to.be.ok
                        expect(resultadoMal).to.be.false
                        expect(resultadoMal).is.false

                    })


                })


----------------------------------------------------------------------------------------------------------

TESTING AVANZADO


        clase 41 1.20hs