DOCKER
    Plataforma que permite  crear, probar e implementar aplicativos en unidades de software estandarizadas  "contenedores"

    Podemos "virtualizar " el OS de un servidor con el fin de realizaar ejecuciones de aplicaciones con la max. compatibilidad y el mejor entorno

    Evitar el "EN MI PC SI FUNCIONABA"


¿AHORA PORQUE NO PODRIA FUNCIONAR EN OTRA PC?
    Como sabemos el desarrollo no es " ideal" tenemos multiples factores, ademas del codigo en si.
    Por ej, Hardware, librerias, antivirus, navegador , etc etc


-------------------------------------------------------------------------------------------------------------------
MAQUINAS VIRTUALES
    Como solucion se plantean las maquinas virtuales, de manera crolla podesmos decir que es cuando nuestra computadora utiliza sus recursos para simular otro OS.

-------------------------------------------------------------------------------------------------------------------
La evolucion fueron los CONTENEDORES
    Un contendro es un entorno de ejecucion para un aplicativo en particular.
    La clave de un contenedor es el CONCEPTO DE AISLAMIENTO


DOCKER nos ayuda a generar contenedores, es una plataforma gestora de contenedores

    1º DOCKERFILE:
        Este cuenta con las intrucciones paso a paso para que nuestro proyecyto genere una imagen.
        la generacion se realizad con el comando docker build-t "nombre IMG a generar" .
        (importante finalizar con "." para indifcar que el archvo docker file estaa en el directorio actual)

    2ª Una imagenen es el equivalente de una CLASE, pero con un proyeecto completo.
    Cuando genermos la img significa que podemos generar multiples contenedores de esa app ( como instanscias )

    3º CONTENEDOR:
        El punto final en el que ejecutamos el app. Pero esta vez desde el entorno cerrado.
        se puede generar via DOCKER DESKTOP, o via CLI con el comando
            docker run --name nombreContenedor -p portExterno:portInterno -d nombreIMG






    1º Creamos un archivo:
            
            Dockerfile
                                        // ejemplo : para obtner las img buscamos en el buscador de img de la plataforma de dcoker
                FROM node:20.10.0       //aca ponemos la img desde deonde vamos a partir

                WORKDIR /app            //ruta al servidor

                COPY package*.json ./       //ruta al package de nuestro proyecto (el "./" se refiere al WORKDIR, es decir clonara el package dentro de /app)
                
                RUN npm install             //Que comando correra

                COPY ./src ./src            //Copiamos todo el contenido dentro del primer argumento "./src" deentro de la otra ruta (2do argumento "./src")

                EXPOSE 3000             //puerto que expone el proyecto

                CMD ["npm", "star"]       //Gerneralmnete se one el script con el cual se puede levantar el proyecto segun nuestro package.json ( en nuetro caso deberiamos agregarlo a nuestro packgace dentro de "scripts":::: "start": "node ./src/app.js")

    
    2º AHORA DEBEMOS MONTAR LA IMG DE DOCKER

    !!!RECORDAR ANTES, COMENTAR LA LIBRERIA DE DOTENVT Y LA CONFIGURACION SOLO DEW IMPORTACIONES Y ESO DE DOTENV, PORQUE EL CONTENEDOR, USA VARIABLES DE ENTORNOS Q NOSOTROS CONFUIGUAREMOS DP

        en consola.


            docker build -t nombreConetedor .      //recorudar el . ( explicacion mas arriba)
            

    3º COrrer nuestro contenedor.

        Tenemos 2 opciones desde Consola y desde PlataFomra ( mas facil )

        EN plataforma:
            Tocamos el boton de play en el contendor:
                ·Colocamos el nombre de contenedor.
                ·Colocar Puerto de via de entrada al puerto expiesto en app
                ·Configurar var: ENTORNO


        CONSOLA:
            
            docker run --name nombreDeCOntendeor -p PuertodeEntrada:PuertoExpuesto -d mongo


-------------------------------------------------------------------------------------------------------------------

¿AHORA COMO SUBIMOS ESTO A LA NUBE?
    Existe DOCKERHUB, que seria nuestra manera de subir a la nube las images

        1º Una vez levvantada la img y el contenedor de manera local y corroborado que el start funcione.

        2º ( en consola ) docker login

        3º Colocarle un nombre a la img

            docker tag nombreViejo <username>/nombreNuevo

        4º Subir a la nube la img

            docker push <username>/nombreIMG


-------------------------------------------------------------------------------------------------------------------

ORQUESTACION DE CONTENEDORES:

    Termino similar a ala clusterizacion. En vez de trabajar con clusters, trabajamos con nodos (contenedores)

    Contaraimso con balanceador de cargas, reincio ante fallos etc


-------------------------------------------------------------------------------------------------------------------

KUBERNETES; 
    Teconolofia de orquestamineto de contenedores.
        Tomara instrucciones y las ejecutara para poder distribuir PODS; donde cada POD puede tener n contenedoresm de esta forma, todos los contenedores que pertenezcan a un POD, podran funcionar como una entidad unica para intercomunicarse

    

    COMO instalar:

        -Primero para utilzar correctamente es recomendado utiizar la consola de comandos de kubernetes ( llamada "kubectl")

        -Para eso debemos instalar "curl" en nuestra powerShell, para asi poder realizar la descarga de kubectl.

        -Luego una vez tngamos curl (GENERALMENTE EN LOS ULTIMOS WINDOWS, YA VIENE INSTALADO)


            curl.exe .LO "ruta para kubectL ("docuemntacon")

        


        Luego en la consola de ctl de kubernetes


    COMANDOS MAS UTILIZADOS

        GETS ; Son comandos utilizados para realizar consultas acerca de los recursos de kubernetes 

            kubectl get pods
            kubectl getdeployments
            kubectl get services

        APPLY: Crea nuestro primr recurso, el modelo es declrativo de manera que necesitaremos primero tener instrucciones que configuren el POD a crear.

        EDIT: Cambiar configuracion  de nuestros PDDS



    PRINCIPALES CONCEPTOS DE KUBERNETES:

        POD: Unidad minima de ejecucion de kubernetes, consiste en un espacio donde alojamos nuestros contenedores.
        
        REPLICAS: ref al numero de pods a generarse, donde cada pod podra contener una o n instancias de un contendeor

        POD TEMPLATE: Si sabemos que un pod contendra uno o mas contenedores, entonces necesitamos una plantilla para generar los contendores, estas planitllas conteendran infomacion sobre la replicacion de los contenedores que debra generar una vez generada la configuracion

        SERVICE: Un rcurso de servicio hace que los PODS sean accesivles para otros PODS o usuarios fuera del clusrter. Y con esto podra recibir req, y redigirar a los pods a partir de un balanceador de carga
            Sin un serrvicio es imposible acceder a un pod





        CONFIGURAR KUBERNET A PARTIR DE UN YAML
        
            apiVersion: v1
            kind: Service
            metadata:
            name: usersservice
            spec:
            selector:
                app: userspods
            ports:
                - port: 3000
                targetPort: 3000
            type: LoadBalancer
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
            name: usersdeploy
            spec:
            replicas: 3
            selector:
                matchLabels:
                app: userspods
            template:
                metadata:
                labels:
                    app: userspods
                spec:
                containers:
                    - name: usercontainer
                    image: diegopolverelli/app-prueba20240225:1.0.0
                    ports:
                        - containerPort: 3000
                    env:
                        - name: MONGO_URL
                        value: mongodb+srv://backend49975:CoderCoder@cluster0.dxc9fdl.mongodb.net/?retryWrites=true&w=majority
                        - name: DB_NAME
                        value: clase36
                    imagePullPolicy: Always




        Luego en la consola del dir "kubectl applu -f nombredeYAML

-------------------------------------------------------------------------------------------------------------------

CTL + MINIKUBES
    Permite realizar pruebas de orquetacion de contenedoresm

        en ctl
                minikube start      //descarga img de minuikbe

                mikube kubectl dashboard    //interfaz grafica de el cluster de kubernetes



COMANDOS UTILIZADOS  Y PASOS RESUMIDOS POR EL PROFE

minikube dashboard
minikube service list
minikube service <servicioQueQuieroLanzar>

kubectl apply -f kubeUsers01.yaml

kubectl cluster-info 

kubectl get deployments
kubectl describe deployments

kubectl get pods
kubectl describe pods

kubectl get services
kubectl describe services

kubectl logs -f deploy01abmusuarios-85b94cc98-8dxhg (nombre POD)

Archivo yml:
La línea apiVersion: apps/v1 en un archivo YAML de Kubernetes especifica la versión 
de la API de Kubernetes que se utilizará para interpretar el resto del documento. 
En este caso, apps/v1 indica que estás utilizando la versión 1 de la API de 
aplicaciones de Kubernetes.

En Kubernetes, las API están organizadas en grupos y versiones. El grupo apps se 
utiliza para recursos relacionados con aplicaciones, como Deployments, ReplicaSets 
y StatefulSets. La versión v1 es la primera versión de la API de aplicaciones.

Por lo tanto, apiVersion: apps/v1 en el contexto de un archivo YAML de Deployment 
significa que estás utilizando la versión 1 de la API de aplicaciones de Kubernetes 
para definir un objeto de tipo Deployment. Esto asegura que el formato y la 
estructura del objeto se ajusten a la especificación de la versión 1 de la API de 
aplicaciones.

En Kubernetes, hay varios grupos y versiones de API que se utilizan para definir 
diferentes recursos y funcionalidades. Aquí hay algunos ejemplos:

- Core API Group ("" o "v1"):

apiVersion: v1 se utiliza para recursos básicos de Kubernetes, como Pods, Services 
y ConfigMaps.

- Apps API Group (apps/v1, apps/v1beta1):

apiVersion: apps/v1 se utiliza para recursos de nivel superior relacionados con 
aplicaciones, como Deployments, ReplicaSets y StatefulSets.
apiVersion: apps/v1beta1 es una versión beta anterior de la API de aplicaciones.

Estos son solo algunos ejemplos, y la lista completa puede cambiar a medida que 
Kubernetes evoluciona. Al consultar la documentación oficial de Kubernetes, 
podrás encontrar información detallada sobre las versiones y grupos de API 
disponibles.


Pasos:
1) Verificar proyecto: start scrip, dotenv, etc.

2) crear imagen a partir de Dockerfile: 
docker build -t nombreImagen .

3) probar contenedor para validar su correcto funcionamiento
docker run --name app01-01 -p 3000:3000 nombreImagen

4) renombrar imagen, para adaptarla a lo que necesita DockerHub:
docker tag app-prueba2 diegopolverelli/app-prueba2:1.0.0

5) loguearme en Dockerhub:
docker login

6) subir imagen a Dockerhub:
docker push diegopolverelli/app-prueba2:1.0.0

7) descargar kubectl, instalarlo, y probarlo *:
kubectl version --client

8) descargar minikube

9) inicializarlo (con Docker Desktop encendido):
minikube start

10) probar la conexión al cluster con kubectl:
kubectl cluster-info 
kubectl get deployments
kubectl describe deployments
kubectl get pods
kubectl get services

11) generar archivo de configuración de deployment / service (.yaml)
y ejecutarlo:
kubectl apply -f kubeUsers01.yaml

12) probar con kubectl si funcionó:
kubectl get deployments / pods /services

13) Ejecutar con minikube, el servicio creado:
minikube service list
minikube service <servicioQueQuieroLanzar>

14) Otros: 
- abrir tablero de comandos minikube: 
    minikube dashboard
- ver logs desde CLI (PowerShell):
    kubectl logs -f deploy01abmusuarios-85b94cc98-8dxhg (nombre POD)



* minikube trae una versión de kubectl, que se ejecuta de esta forma:
minikube kubectl -- get pods
minikube kubectl -- get services
minikube kubectl -- get deployments
minikube kubectl apply -- -f kubeUsers02.yaml
minikube kubectl version -- --client