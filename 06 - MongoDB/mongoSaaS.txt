Entramos a Mongo Atlas.


Crear new Proyect

Debemos crear nuestro Cluster

AGREGAR  IP 00000 para acceder desde cualq PC

Creamos user y contraseÃ±a para el Cluster
   AgustinLovera - 45507271Udmv

Luego tenemos para elegir los metodos de Conexion, nsootros vamos a usar Cliente interfaz grafica.  Pero vaos a hacer la conexion desde nuestro entorno de NOde.JS Con nuestro servidor de express.


 para eso usamos el ORM mongoose

        -npm i mongoose

    Y luego nos vamos al Cluster - metodos de conexion - Drivers - Copiamos URL


    -importamos mongoose en server.JS

    - y luego conectamos con la BD

        try {
            await mongoose.connect('mongodb+srv://AgustinLovera:45507271Udmv@cluster0.govus.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {dbName: 'TestBackEnd'})
            console.log('Conexion Existosa con DB')
        } catch (error) {
            console.log(error.message)
        }



 - Una vez echa la conexion debemos crear el modelo de documento a utilizar con mongoose

        Para crear el modelo, nosotros le debemos dar un schema, y luego ese schema utilizarlo como el modelo

            src/routes/models/doc.model.JS
                
                import mongoose from "mongoose";

                        const usuariosColection = 'usuarios'

                        const usuariosSchema = new mongoose.Schema(
                            {
                            },
                            {
                            }
                        )
                        // Aca exportamos el modelo, y le enviamos como argumento la coleccion y el shcema a utilizar
                        export const usuariosModel = mongoose.model(usuariosColection, usuariosSchema) 



//MANERA RESUMIDA = export const productsModel = mongoose.model('products', new mongoose.Schema(
    {
    }
))

-Luego empezamos a juagr con el CRUD---------------------------------------------------------------------------------------------------------------

-GET  es basicamente ir haciendo un Find o FindOne por ej cuando queres buscar uno por id. etc
No es muy dificil, seguri el codigo



        EJ de POST--------------------------------------------------------------------

            router.post('/',async (req,res) =>{
                let {nombre, apellido, email, edad} = req.body

                if(!nombre || !apellido ||!email ||!edad){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'NO COLOCO LOS DATOS NECESARIOS NOMBRE, APELLIDO, EMAIL, EDAD'});
                }

                let existUser

                try {
                    existUser= await usuariosModel.findOne({deleted: false, email})
                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message,});
                }

                if(existUser){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'el usuario con el email Ingresado ya existe en DB'});
                }

                try {
                    let newUser = await usuariosModel.create ({nombre, apellido, email, edad})
                    res.setHeader('Content-Type','application/json');
                    return res.status(200).json({ok: newUser});
                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message,});
                }
            })


        PUT---------------------------------------------------------------------
                router.put('/:id', async(req,res) =>{
                let {id} = req.params

                //VALIDAR QUE SE HAYA INGRESADO UN OBJECT ID VALIDO PARA DB
                if(!mongoose.Types.ObjectId.isValid(id)){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'Ingrese un id Valido'});
                }
                
                let existUser
                try {
                    existUser= await usuariosModel.findOne({deleted: false, _id: id})
                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message,});
                }

                if(!existUser){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'No existen usuarios con el id Ingresado'});
                }

            //NO PODEMOS DEJAR QUE SE PUEDA MODIFICAR EL ID DE LOS DATOS EN DB
                if(req.body._id || req.body.email){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'NO SE PERMITE MODIFICAR EL ID O EL EMAIL'});
                }


                //MODIFICAMOS EL DATO CON EL METODO UPDATE, EN ESTE CASO SINGULAR UPDATEONE
                let userPut

                try {
                    userPut = await usuariosModel.updateOne({deleted:false, _id: id}, req.body) // Filtro y luego propiedades a modificar ( lo que llega en el body en este caso)
                    

                    //ModifiedCount es la propiedad que devuelve update si se concreta la modificacion, si es 0 no modifico nada, si es mayor, ya modifico algun dato, por lo tanto abajo hacemos una validacion mas.
                    if(userPut.modifiedCount === 0){
                        res.setHeader('Content-Type','application/json');
                        return res.status(404).json({error: 'NO SE CONCRETO LA MODIFICACION'});
                    }
                    
                    res.setHeader('Content-Type','application/json');
                    return res.status(200).json({ok: userPut});
                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message});
                }
            })



        DELETE ---------------------------
        
            router.delete('/:id', async(req,res)=>{
                let {id} = req.params

                //VALIDAR QUE SE HAYA INGRESADO UN OBJECT ID VALIDO PARA DB
                if(!mongoose.Types.ObjectId.isValid(id)){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'Ingrese un id Valido'});
                }
                
                let existUser
                try {
                    existUser= await usuariosModel.findOne({deleted: false, _id: id})
                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message,});
                }

                if(!existUser){
                    res.setHeader('Content-Type','application/json');
                    return res.status(404).json({error: 'No existen usuarios con el id Ingresado'});
                }



                //COMO ESTAMOS USANDO UNA "ELIMINACION LOGICA" NO VAMOS A ELIMINAR FISICAMENTE A EL DATO, SINO QUE CAMBIAREMOS SU ESTADO A UN DESACTIVADO, AL FIN Y AL CABO ES UN UPDATE
                let userDeleted
                try {
                    userDeleted = await usuariosModel.updateOne({deleted:false, _id: id}, {deleted: true}) // Filtro y luego propiedades a modificar ( lo que llega en el body en este caso)
                    

                    //ModifiedCount es la propiedad que devuelve update si se concreta la modificacion, si es 0 no modifico nada, si es mayor, ya modifico algun dato, por lo tanto abajo hacemos una validacion mas.
                    if(userDeleted.modifiedCount === 0){
                        res.setHeader('Content-Type','application/json');
                        return res.status(404).json({error: 'NO SE CONCRETO LA MODIFICACION'});
                    }
                    
                    res.setHeader('Content-Type','application/json');
                    return res.status(200).json({ok: userDeleted});


                    //SI quisieramos borrar fisicamente el dato deberiamos hacer:
                    //userDeleted = await usuariosMode.deleteOnde({_id:id})
                /*  if(userDeleted.deletedCount === 0){
                    res.setHeader('Content-Type','application/json');
                        return res.status(404).json({error: 'NO SE CONCRETO LA ELIMINACION'});
                    }
                    
                    res.setHeader('Content-Type','application/json');
                    return res.status(200).json({ok: userDeleted}); */



                } catch (error) {
                    res.setHeader('Content-Type','application/json');
                    return res.status(500).json({InternalError: error.message});
                }

            })